{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS2",
      "allowedValues": [
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2"

      ],
      "metadata": {
        "description": "Size of vm"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "admin@example.com",
      "metadata": {
        "description": "Username for the Admin account. Must be a valid email address."
      }
    },
    "adminUserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for Admin account. Must be at least 8 characters containing letters, numbers and symbols."
      }
    },
    "username": {
      "type": "string",
      "defaultValue": "cloudbreak",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "password": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "smartsense": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
          "yes",
          "no"
      ],
      "metadata": {
        "description": "By Opting-In, you read and agree to the SmartSense terms."
      }
    },
    "remoteLocation": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Allow connections from this address range. Must be a valid CIDR IP."
      }
    },
    "sshKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH key for cloudbreak"
      }
    },
    "cloudControllerOsDisk": {
    "type": "string",
    "allowedValues": [
        "new",
        "existing"
    ],
    "metadata": {
      "description": "Create new OS image or use existing one."
    }
    }
  },
  "variables": {
    "newStorageAccountName": "[concat('cbdstorage', uniqueString(resourceGroup().id))]",
    "fileUris": "https://raw.githubusercontent.com/sequenceiq/azure-cbd-quickstart/azure-cloud/install-cbd.sh",
    "commandToExecute": "./install-cbd.sh",
    "extensionName": "CustomScript",
    "scenarioPrefix": "cbdeployer",
    "apiVersion": "2015-06-15",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "ubuntuOSVersion": "16.04.0-LTS",
    "osDiskName": "[concat(variables('scenarioPrefix'),'OSDisk')]",
    "osDiskUriHash": {
      "new": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]",
      "existing": "http://sequenceiqnortheurope2.blob.core.windows.net/images/pkroscd89l62g2q.vhd"
    },
    "osDiskUri": "[variables('osDiskUriHash')[parameters('cloudControllerOsSDisk')]]",
    "osDiskCreateOptionHash": {
      "new": "FromImage",
      "existing": "Attach"
    },
    "osDiskCreateOption": "[variables('osDiskCreateOptionHash')[parameters('cloudControllerOsSDisk')]]",
    "nicName": "[concat(variables('scenarioPrefix'),'Nic')]",
    "vnetAddressPrefix": "10.0.0.0/16",
    "subnetName": "[concat(variables('scenarioPrefix'),'Subnet')]",
    "subnetPrefix": "10.0.0.0/24",
    "storageAccountType": "Standard_LRS",
    "publicIPAddressName": "[concat(variables('scenarioPrefix'),'PublicIp')]",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountContainerName": "vhds",
    "vmName": "[concat(variables('scenarioPrefix'),'VM')]",
    "virtualNetworkName": "[concat(variables('scenarioPrefix'),'Vnet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "singleQuote": "'",
    "userData": "[concat('#!/bin/bash\n\ntouch /tmp/cb-custom-data-default.txt\n','\necho \"export CBD_VERSION=azure\" >> /tmp/.cbdprofile','\necho \"export ULU_HWX_CLOUD_DEFAULT_REGION=',resourceGroup().location,'\" >> /tmp/.cbdprofile','\necho \"export AZURE_SUBSCRIPTION_ID=',subscription().subscriptionId,'\" >> /tmp/.cbdprofile','\necho \"export AZURE_TENANT_ID=',subscription().tenantId,'\" >> /tmp/.cbdprofile','\necho export ULU_HWX_CLOUD_AZURE_SSH_KEY=\"',variables('singleQuote'),parameters('sshKey'),variables('singleQuote'),'\" >> /tmp/.cbdprofile','\necho \"export ULU_HWX_CLOUD_AZURE_RESOURCE_GROUP=',resourceGroup().name,'\" >> /tmp/.cbdprofile','\necho \"export ULU_HWX_CLOUD_AZURE_DEFAULT_VIRTUAL_NETWORK_ID=',variables('virtualNetworkName'),'\" >> /tmp/.cbdprofile','\necho \"export ULU_HWX_CLOUD_DEFAULT_SUBNET_ID=',variables('subnetName'),'\" >> /tmp/.cbdprofile')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('newStorageAccountName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat('dnsname', uniqueString(resourceGroup().id))]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('username')]",
          "adminPassword": "[parameters('password')]",
          "customData": "[base64(variables('userData'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk1",
            "vhd": {
              "uri": "[variables('osDiskUri')]"
            },
            "caching": "ReadWrite",
            "createOption": "variables('osDiskCreateOption')"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "cbdeployerVM/DockerExtension",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "DockerExtension",
        "typeHandlerVersion": "1.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
            "docker":{
                "options": ["--storage-driver=overlay", "--graph=/mnt/resource/docker/"]
            }
        },
        "protectedSettings": {}
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'/installcustomscript')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', 'cbdeployerVM','DockerExtension')]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.3",
        "settings": {
          "fileUris": "[split(variables('fileUris'), ' ')]",
          "commandToExecute": "[variables('commandToExecute')]"
        }
      }
    }
  ],
  "outputs": {
     "publicIp": {
       "type": "string",
       "value": "[resourceId(concat('Microsoft.Network','/','publicIPAddresses'),variables('publicIPAddressName'))]"
     }
   }
}
